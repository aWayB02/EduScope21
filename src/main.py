import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import (
    CallbackQuery,
    Message,
)
from api.clusters import get_cluster
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from api.participant import get_participant_info

from buttons import main_menu, cluster

bot = Bot(token="7696341778:AAFr1VqDVfIKTqsvp6nguvQpFGjSnpDDjZk")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class GetUserInput(StatesGroup):
    waiting_for_text = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"Peer to Peer {message.from_user.first_name}! üçê", reply_markup=main_menu()
    )


@dp.message(GetUserInput.waiting_for_text)
async def get_user_info(message: types.Message, state: FSMContext):
    login = message.text.lower()
    data = await get_participant_info(login)
    if not data:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:(", reply_markup=main_menu())
        await state.clear()
        return
    login, className, parallelName = (
        data["login"],
        data["className"],
        data["parallelName"],
    )
    expValue, level, expToNextLevel = (
        data["expValue"],
        data["level"],
        data["expToNextLevel"],
    )
    coalitionName, rank, coins = data["name"], data["rank"], data["coins"]
    if "active" in data:
        await message.answer(
            f"–õ–æ–≥–∏–Ω: <b>{login} üë§</b>\n"
            f"–ü–æ—Ç–æ–∫: <b>{className}</b>\n"
            f"C—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: <b>{parallelName}</b> ‚úÖ\n"
            f"Xp: <b>{expValue}</b>\n"
            f"Level: <b>{level}</b> üìà\n"
            f"XpToNextLevel: <b>{expToNextLevel}</b>\n"
            f"Coins: <b>{coins}</b> üí∏\n"
            f"–¢—Ä–∞–π–±: <b>{coalitionName}</b>\n"
            f"–ú–µ—Å—Ç–æ –≤ —Ç—Ä–∞–π–±–µ: <b>{rank}</b> üìä\n"
            f"–õ–æ–∫–∞—Ü–∏—è: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–º–ø—É—Å–µ‚ùå",
            parse_mode="HTML",
            reply_markup=main_menu(),
        )
        await state.clear()
        return
    clusterName = data["clusterName"]
    row = data["row"]
    number = data["number"]
    await message.answer(
        f"–õ–æ–≥–∏–Ω: <b>{login} üë§</b>\n"
        f"–ü–æ—Ç–æ–∫: <b>{className}</b>\n"
        f"C—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: <b>{parallelName}</b> ‚úÖ\n"
        f"Xp: <b>{expValue}</b>\n"
        f"Level: <b>{level}</b> üìà\n"
        f"XpToNextLevel: <b>{expToNextLevel}</b>\n"
        f"Coins: <b>{coins}</b> üí∏\n"
        f"–¢—Ä–∞–π–±: <b>{coalitionName}</b>\n"
        f"–ú–µ—Å—Ç–æ –≤ —Ç—Ä–∞–π–±–µ: <b>{rank}</b> üìä\n"
        f"–õ–æ–∫–∞—Ü–∏—è: <b>{clusterName} | —Ä—è–¥ {row} | –ú–µ—Å—Ç–æ {number}</b>\n",
        parse_mode="HTML",
        reply_markup=main_menu(),
    )
    await state.clear()


@dp.message(F.text)
async def is_no_valid_input(message: Message):
    await message.answer_sticker(
        "CAACAgIAAxkBAAIBmmgzbIEOenYtcwzYNbCPPI35g_RZAAIldQACtRZ4STRZWNqBgPpLNgQ"
    )


@dp.callback_query(F.data == "get_user")
async def get_name_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ä–∞:")
    await state.set_state(GetUserInput.waiting_for_text)
    await callback.answer()


@dp.callback_query(F.data == "open_cluster")
async def get_open_cluster(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä:", reply_markup=cluster())
    await callback.answer()


@dp.callback_query(F.data.startswith("cluster:"))
async def get_cluster_info(callback: CallbackQuery):
    name = callback.data.split(":")[-1]
    names_clusters = {
        "D": ("Denal", 3),
        "E": ("Ezdel", 2),
        "S": ("Sabar", 3),
        "T": ("Tesham", 2),
    }
    data = await get_cluster(names_clusters[name][0])
    total_places, free_places, occupied_places = data
    await callback.message.answer(
        f"–ö–ª–∞—Å—Ç–µ—Ä: <b>{names_clusters[name][0]} | –≠—Ç–∞–∂: {names_clusters[name][1]}</b>\n"
        f"–†–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤—Å–µ–≥–æ: <b>{total_places} üü¢</b>\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏: <b>{free_places} üÜì</b>\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏: <b>{occupied_places} üßëüèª‚Äçüíª</b>",
        parse_mode="HTML",
        reply_markup=cluster(),
    )
    await callback.answer()


@dp.callback_query(F.data == "back")
async def back(callback: CallbackQuery):
    await callback.message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
